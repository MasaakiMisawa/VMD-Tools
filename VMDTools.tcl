###########################################################################
## VMD Tools (2016.12.15)                                                ##
##                                                                       ##
## -Functions-                                                           ##
##  A. chview: Change Viewpoint by Moving Atomic Configurations          ##
##  B. topdb: Export Selected Frames and Atoms as PDB a Trajectory File  ##
##  C. pickconfig: Export Selected Frames as a Scaled Coordination File  ##
##  D. ssr: Render Snapshots of Selected Frames                          ##
##  E. makebonds: Make Bondlists for All Frames                          ##
##  F. readbonds: Read Bondlist and Update Every Frames                  ##
##  G. readdata: Read Trajectory Value as "User" Variable                ##
##  H. readeigv: Read Eienvalue as Volmetric Data Set                    ##
##  I. readeigvs: Linear Combination of Eienvalue Data Sets              ##
##  J. cntr: Draw Clock Conuter                                          ##
##  K. rmat: Calculate Rotation Matrix                                   ##
##  L. darrow: Draw Arrows on Selected Atoms                             ##
##  M. getinside: Get Serial Number of Atoms in PBC Box                  ##
##  N. pbcmove: Move Atoms on Outside PBC Box to Inside                  ##
##                                                                       ##
###########################################################################
## Setup                                                                 ##
##                                                                       ##
## 1. Load atomic configuration file                                     ##
##                                                                       ##
## 2. Select "VMD Main -> Extansions -> TkConsole"                       ##
##                                                                       ##
## 3. Execute "source (path)/VMDTools.tcl"                               ##
##                                                                       ##
## 4. Execute functions                                                  ##
##                                                                       ##
###########################################################################

set script_name [ info script ] 
set dir_name    [ file dirname $script_name ]

#source $dir_name/scripts/display_settings.tcl
#source $dir_name/scripts/color_palette.tcl
source $dir_name/scripts/chview.tcl
source $dir_name/scripts/topdb.tcl
source $dir_name/scripts/pickconfig.tcl
source $dir_name/scripts/ssr.tcl
source $dir_name/scripts/makebonds.tcl
source $dir_name/scripts/readbonds.tcl
source $dir_name/scripts/readdata.tcl
source $dir_name/scripts/readeigv.tcl
source $dir_name/scripts/readeigvs.tcl
source $dir_name/scripts/cntr.tcl
source $dir_name/scripts/rmat.tcl
source $dir_name/scripts/darrow.tcl
source $dir_name/scripts/getinside.tcl
source $dir_name/scripts/pbcmove.tcl

#######################################################################
proc howto {arg} {
  if {$arg == "chview"} then {
    puts "###########################################################################"
    puts "## A. chview: Change Viewpoint by Moving Atomic Configurations           ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "## chview -shift { \$x \$y \$z }:                                           ##"
    puts "##   --- shift atomic positions in {\$x \$y \$z} (ang.) in boundary box.    ##"
    puts "##                                                                       ##"
    puts "## chview -lshift { \$x \$y \$z }:                                          ##"
    puts "##   --- shift atomic positions in {\$x \$y \$z} (ang.) in boundary box     ##"
    puts "##       along the lattice axes                                          ##"
    puts "##                                                                       ##"
    puts "## chview -com \"\$selection\":                                             ##"
    puts "##   --- fit center of mass of \$selection to center of view              ##"
    puts "##                                                                       ##"
    puts "## chview -gc \"\$selection\":                                              ##"
    puts "##   --- fit geometrical center of \$selection to center of view          ##"
    puts "##                                                                       ##"
    puts "## chview -reset                                                         ##"
    puts "##   --- reset atomic positions                                          ##"
    puts "##                                                                       ##"
    puts "## Example: chview -com \"name O H\"                                       ##"
    puts "##   --- fit center of mass of oxygen and hydrogen to center of view     ##"
    puts "##                                                                       ##"
    puts "## Memo: Input lattice constant is required                              ##"
    puts "##       (\"pbc set {\$a \$b \$c \$alpha \$beta \$gamma} -all\" on Tk Console)   ##"
    puts "##       This program using \"pbcmove.tcl\"                                ##"
    puts "##                                                                       ##"
    puts "##       2016.6.8 apply for trigonal cell                                ##"
    puts "###########################################################################"
  } elseif {$arg == "topdb"} then {
    puts "###########################################################################"
    puts "## B. topdb: Export Selected Frames and Atoms as a PDB Trajectory File   ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  topdb \$i \$j \$filename                                                ##"
    puts "##    \$i: start frame                                                    ##"
    puts "##    \$j: end frame                                                      ##"
    puts "##                                                                       ##"
    puts "##  topdb -skip \$sk -sel \$selection \$i \$j \$filename                      ##"
    puts "##    \$selsction: selection of atoms (like as \"name Fe O\")               ##"
    puts "##    \$sk: skip frames                                                   ##"
    puts "##                                                                       ##"
    puts "## Example: topdb -skip 5 0 100 trajectory.pdb                           ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "pickconfig"} then {
    puts "###########################################################################"
    puts "## C. pickconfig: Export Selected Frame as a Scaled Coordination File    ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##  pickconfig \$frame \$filename -sel \"selection\"                         ##"
    puts "##    \$frame: input frame (default frame is \"now\")                       ##"
    puts "##    \$filename: output file name (default filename is \"Config.dat\")     ##"
    puts "##    -sel \"selection\": output only selected atoms (default: all)        ##"
    puts "##                                                                       ##"
    puts "## Memo: Keywords are determined by name on VMD, not element or type     ##"
    puts "##       (you can check by \"\[atomselect top all\] get name\" in Tk console)##"
    puts "##       Information of the lattice constants are required               ##"
    puts "##       (\"pbc set {\$a \$b \$c \$alpha \$beta \$gamma} -all\")                 ##"
    puts "##                                                                       ##"
    puts "##       2016.8.10 apply for trigonal cell                               ##"
    puts "###########################################################################"
  } elseif {$arg == "ssr"} then {
    puts "###########################################################################"
    puts "## D. ssr: Render Snapshots of Selected Frames                           ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  ssr -frames \$i \$j                                                    ##"
    puts "##    \$i: initial frame number                                           ##"
    puts "##    \$j: final frame number                                             ##"
    puts "##                                                                       ##"
    puts "##  ssr -frame \$i                                                        ##"
    puts "##    \$i: render frame                                                   ##"
    puts "##                                                                       ##"
    puts "##  (other options)                                                      ##"
    puts "##  ssr -frame \$i -form \$text -skip \$s -rend \$r                          ##"
    puts "##    \$text: format type (default: tga)                                  ##"
    puts "##    \$s: skip every \$s frame (default: 1)                               ##"
    puts "##    \$rend: render type (default: 0)                                    ##"
    puts "##           \$r = 0: Snapshots                                           ##"
    puts "##           \$r = 1: Internal Tachyon                                    ##"
    puts "##           \$r = 2: POV-Ray                                             ##"
    puts "##    -ope: rendering with camera operation                              ##"
    puts "##    opefile format:                                                    ##"
    puts "##    -----------------------------------                                ##"
    puts "##    10                                   #repeat number of ope. 1      ##"
    puts "##    {rotate y by 0.1}                    #operation 1                  ##"
    puts "##    10                                   #repeat number of ope. 2      ##"
    puts "##                                         #operation 2 (no operation)   ##"
    puts "##    10                                   #repeat number of ope. 3      ##"
    puts "##    {rotate z by 0.1} {translate x 1}    #operation 3                  ##"
    puts "##    -----------------------------------                                ##"
    puts "##                                                                       ##"
    puts "##  operation should consists less than 12 word                          ##"
    puts "##                                                                       ##"
    puts "##                                                                       ##"
    puts "## Example: ssr -frames 0 100 -rend TachyonInternal                      ##"
    puts "##   --- Frame000.tga ~ Frame100.tga will be created by Tachyon          ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "makebonds"} then {
    puts "###########################################################################"
    puts "##  E. makebonds: Make Bondlists for All Frames                          ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  makebonds \$filename                                                  ##"
    puts "##    (default filename is \"./bondlist.dat\")                             ##"
    puts "##    then enter the cutoff distances in ang.                            ##"
    puts "##                                                                       ##"
    puts "##  makebonds -pbc \$filename                                             ##"
    puts "##    --- make bondlist with considering PBC                             ##"
    puts "##        (please execute \"readbonds\" with \"-pbc\" option                 ##"
    puts "##         when you apply a bondlist created with this option)           ##"
    puts "##                                                                       ##"
    puts "##  note: cutoff distance should be less than 3.0 ang.                   ##"
    puts "##                                                                       ##"
    puts "##  bondlist format:                                                     ##"
    puts "##  ---------------------                                                ##"
    puts "##  3 5 10     #neighbors of atom 1, step 0                              ##"
    puts "##             #neighbors of atom 2, step 0 (if no neighbors: empty)     ##"
    puts "##  1 12 100   #neighbors of atom 3, step 0                              ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##" 
    puts "##  30 40 50   #neighbors of atom n, step 0                              ##"
    puts "##  3 5 10 12  #neighbors of atom 1, step 1                              ##"
    puts "##  3          #neighbors of atom 1, step 1                              ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##                                                                       ##"
    puts "## Memo: Input lattice constant is required                              ##"
    puts "##       (\"pbc set {\$a \$b \$c \$alpha \$beta \$gamma} -all\")                 ##"
    puts "##       Only for orthorhombic cell                                      ##"
    puts "##       VMD will be stop if there are too many atoms or frames          ##"
    puts "##       Create bondlists on other workspace (not on VMD) is recommended ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "readbonds"} then {
    puts "###########################################################################"
    puts "##  F. readbonds: Read Bondlist and Update Every Frames                  ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  readbonds \$filename                                                  ##"
    puts "##    default filename is \"./bondlist.dat\"                               ##"
    puts "##                                                                       ##"
    puts "##  readbonds -pbc \$filename                                             ##"
    puts "##    --- remove PBC bond with keeping \"numbonds\"                        ##"
    puts "##        if bond distance > 3 ang., it will be considered as PBC bond   ##"
    puts "##                                                                       ##"
    puts "##  Bondlist is applied only for \"Bonds\" or \"CPK\" in Representation.     ##"
    puts "##                                                                       ##"
    puts "##  The bondlist is available only for current box.                      ##"
    puts "##  (if \"pbc wrap -shiftcenter\" or \"chview\" is done after readbonds,     ##"
    puts "##   \"Bonds\" or \"CPK\" will not represent exactlly.)                      ##"           
    puts "##                                                                       ##"
    puts "##  bondlist format:                                                     ##"
    puts "##  ---------------------                                                ##"
    puts "##  3 5 10     #neighbors of atom 1, step 0                              ##"
    puts "##             #neighbors of atom 2, step 0 (if no neighbors: empty)     ##"
    puts "##  1 12 100   #neighbors of atom 3, step 0                              ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##" 
    puts "##  30 40 50   #neighbors of atom n, step 0                              ##"
    puts "##  3 5 10 12  #neighbors of atom 1, step 1                              ##"
    puts "##  3          #neighbors of atom 1, step 1                              ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##                                                                       ##"
    puts "## Memo: Input lattice constant is required                              ##"
    puts "##       (\"pbc set {\$a \$b \$c \$alpha \$beta \$gamma} -all\")                 ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "readdata"} then {
    puts "###########################################################################"
    puts "##  G. readdata: Read Trajectory Value as \"User\" Variable                ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  readdata \$filename -clm \$i -var \$var                                 ##"
    puts "##    \$filename: path of datafile                                        ##"
    puts "##    \$i: data column (default: 1)                                       ##"
    puts "#e    \$var: variable name (default: user) e.g. user, user2, user3, ...   ##"
    puts "##                                                                       ##"
    puts "##  example:                                                             ##"
    puts "##    readdata ./coordination.dat -clm 2 -var user2                      ##"
    puts "##                                                                       ##"
    puts "##  datafile format:                                                     ##"
    puts "##  ---------------------                                                ##"
    puts "##  DAT 1.0   #value for atom 1, step 0                                  ##"
    puts "##  DAT 2.0   #value for atom 2, step 0                                  ##"
    puts "##  DAT 1.5   #value for atom 3, step 0                                  ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##  DAT 1.2   #value for atom n, step 0                                  ##"
    puts "##  END       #end frame                                                 ##"
    puts "##  DAT 1.0   #value for atom 1, step 1                                  ##"
    puts "##  DAT 2.0   #value for atom 2, step 1                                  ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##   .                                                                   ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "readeigv"} then {
    puts "###########################################################################"
    puts "## H. readeigv: Read Eienvalue as Volmetric Data Set                     ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  readeigv (filename)                                                  ##"
    puts "##   --- filename: qm_eigv.d.***** (raw data from pwp)                   ##"
    puts "##                                                                       ##"
    puts "##  read eigv (filename) (filename2)                                     ##"
    puts "##   --- read 2 files                                                    ##"
    puts "##                                                                       ##"
    puts "##  read eigv (filename) as (dataname)                                   ##"
    puts "##   --- input data as name of (dataname)                                ##"
    puts "##                                                                       ##"
    puts "## (example)                                                             ##"
    puts "##  read eigv qm_eigv.d.5.00000 as HOMO qm_eigv.d.7.00000 as \"LUMO 2\"    ##"
    puts "##                                                                       ##"
    puts "##  Memo:                                                                ##"
    puts "##   Lattice parameters are required                                     ##"
    puts "##   Only for orthorhombic cell                                          ##"
    puts "##   New format: readeigv2 (2016.1.8)                                    ##"
    puts "##                                                                       ##"
    puts "###########################################################################" 
  } elseif {$arg == "readeigvs"} then {
    puts "###########################################################################"
    puts "## I. readeigvs: Linear Combination of Eienvalue data sets               ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  read eigv (filename1) (filename2) ... as (dataname)                  ##"
    puts "##                                                                       ##"
    puts "##  Memo:                                                                ##"
    puts "##   Lattice parameters are required                                     ##"
    puts "##   Only for orthorhombic cell (?)                                      ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "cntr"} then {
    puts "###########################################################################"
    puts "## J. cntr: Draw Clock Counter                                           ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  cntr (options)                                                       ##"
    puts "##      -dt \$cntdt: value per frame (default: 1)                         ##"
    puts "##      -t0 \$cntt0: time at the initial frame (default: 0)               ##"
    puts "##      -uni \$cntuni: unit of value (default: step)                      ##"
    puts "##      -put \$cntx, \$cnty, \$cntz: position of counter (default: 0,15,0)  ##"
    puts "##      -size \$cntsize: size of text (default: 2)                        ##"
    puts "##      -thick \$cntthick: thickness of text (default: 2)                 ##"
    puts "##      -color \$cntcolor: color of text (default: black)                 ##"
    puts "##                                                                       ##"
    puts "##  parameters can be set by \"set (variable name) (new value)\"           ##"
    puts "##      example: set cntdt 0.01                                          ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
	 puts "###########################################################################"
	 puts "## J. cntr: Draw Clock Counter                                           ##"
	 puts "##                                                                       ##"
	 puts "## (How to use)                                                          ##"
	 puts "##                                                                       ##"
	 puts "##  cntr -dt \$cntdt -t0 \$cntt0 -unit \$cntuni -put \$cntx \$cnty \$cntz      ##"
	 puts "##      \$dt: value per frame (default: 1)                                ##"
	 puts "##      \$t0: time at the initial frame (default: 0)                      ##"
	 puts "##      \$uni: unit of value (default: step)                              ##"
	 puts "##      \$cntx, \$cnty, \$cntz: position of the counter (default: 0, 15, 0) ##"
	 puts "##                                                                       ##"
	 puts "##  parameters can be set by \"set (variable name) (new value)\"           ##"
	 puts "##      example: set cntdt 0.01                                          ##"
	 puts "##                                                                       ##"
	 puts "##  size and thickness of text are determined by \$cntsize and \$cntthick  ##"
	 puts "##                                                                       ##"
	 puts "###########################################################################"
  } elseif {$arg == "rmat"} then {
    puts "###########################################################################"
    puts "## K. rmat: Calculate Rotation Matrix                                    ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  rmat \$angle \$vx \$vy \$vz                                              ##"
    puts "##      \$angle: rotation angle                                           ##"
    puts "##      \$vx, \$vy, \$vz: rotation axis                                     ##"
    puts "##                                                                       ##"
    puts "##  Calculated matrix will be defined as \$mat.                           ##"
    puts "##  \"\$sel move \$mat\" to execute rotation.                                ##"
    puts "##  Preset matrix:                                                       ##"
    puts "##  imat: inversion matrix                                               ##"
    puts "##  xym, yzm, zxm: mirror matrix                                         ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "darrow"} then {
    puts "###########################################################################"
    puts "## L. darrow: Draw Arrows on Selected Atoms                              ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  darrow \$filename                                                     ##"
    puts "##                                                                       ##"
    puts "## (data file format)                                                    ##"
    puts "##                                                                       ##"
    puts "## 3                 #number of arrows in frame 0                        ##"
    puts "## 1  1.0  0.0  0.0  #atom index, vector vx, vy, vz                      ##"
    puts "## 5  1.0  1.0  1.0  #atom index, vector vx, vy, vz                      ##"
    puts "## 10 1.0  1.0  0.0  #atom index, vector vx, vy, vz                      ##"
    puts "## 4                 #number of arrows in frame 1                        ##"
    puts "## .                                                                     ##"
    puts "## .                                                                     ##"
    puts "##                                                                       ##"
    puts "## Vector components will not be normalized automatically.               ##"
    puts "## Default color is green.                                               ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "getinside"} then {
    puts "###########################################################################"
    puts "## M. getinside: Get Serial Number of Atoms in PBC Box                   ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  getinside                     #all atoms                             ##"
    puts "##  getinside -sel \"selection\"    #selected atoms                        ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } elseif {$arg == "pbcmove"} then {
    puts "###########################################################################"
    puts "## N. pbcmove: Move Atoms on Outside PBC Box to Inside                   ##"
    puts "##                                                                       ##"
    puts "## (How to use)                                                          ##"
    puts "##                                                                       ##"
    puts "##  pbcmove                       #all atoms                             ##"
    puts "##  pbcmove   -sel \"selection\"    #selected atoms                        ##"
    puts "##                                                                       ##"
    puts "###########################################################################"
  } else {
    puts "error: select function name"
    puts ""
    puts " -Functions-"
    puts "  chview"
    puts "  topdb"
    puts "  pickconfig"
    puts "  ssr"
    puts "  makebonds"
    puts "  readbonds"
    puts "  readdata"
    puts "  readeigv"
    puts "  readeigvs"
    puts "  cntr"
    puts "  rmat"
    puts "  darrow"
    puts "  getinside"
    puts "  pbcmove"
    puts ""
  }
}
proc cref {} {
   puts "color scale colors RWB red white blue"
   puts "mol scaleminmax top 2 -1.0 1.0"
   puts "rotate y by 0"
   puts "scale by 1.0"
   puts "mol modstyle 0 top VDW 1.0 12.0"
   puts "mol modstyle 1 top DynamicBonds 2.4 0.3 12.0"
   puts "color Display Background white"
   puts "color Name H white"
}
#######################################################################
#######################################################################

# puts "-------------------"
# puts "How to Use: \"howto (function name)\""
puts "###########################################################################"
puts "## VMD Tools (2016.12.15)                                                ##"
puts "##                                                                       ##"
puts "## -Functions-                                                           ##"
puts "##  A. chview: Change Viewpoint by Moving Atomic Configurations          ##"
puts "##  B. topdb: Export Selected Frames and Atoms as PDB a Trajectory File  ##"
puts "##  C. pickconfig: Export Selected Frames as a Scaled Coordination File  ##"
puts "##  D. ssr: Render Snapshots of Selected Frames                          ##"
puts "##  E. makebonds: Make Bondlists for All Frames                          ##"
puts "##  F. readbonds: Read Bondlist and Update Every Frames                  ##"
puts "##  G. readdata: Read Trajectory Value as \"User\" Variable                ##"
puts "##  H. readeigv: Read Eienvalue as Volmetric Data Set                    ##"
puts "##  I. readeigvs: Linear Combination of Eienvalue Data Sets              ##"
puts "##  J. cntr: Draw Clock Counter                                          ##"
puts "##  K. rmat: Calculate Rotation Matrix                                   ##"
puts "##  L. darrow: Draw Arrows on Selected Atoms                             ##"
puts "##  M. getinside: Get Serial Number of Atoms in PBC Box                  ##"
puts "##  N. pbcmove: Move Atoms on Outside PBC Box to Inside                  ##"
puts "##                                                                       ##"
puts "##    Execute \"howto (function name)\" to show how to use the function    ##"
puts "###########################################################################"
